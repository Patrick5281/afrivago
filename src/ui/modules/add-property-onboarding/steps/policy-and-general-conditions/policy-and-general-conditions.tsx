import { BaseComponentProps } from "@/types/onboarding-steps-List";
import { OnboardingFooter } from "../../components/footer/onboarding-footer";
import { Container } from "@/ui/components/container/container";
import { Typography } from "@/ui/design-system/typography/typography";
import { useState, useEffect } from "react";
import { usePropertyOnboardingStore } from "../../context/propertyOnboarding.store";
import { toast } from "react-toastify";

interface PropertyPricing {
  amount: number;
  commission_percentage: number;
  net_price: number;
  currency: string;
}

interface PropertyData {
  terms_accepted: boolean;
  terms_accepted_at: string | null;
}

export const PolicyAndConditionsStep = ({
  prev,
  next,
  isFirstStep,
  isFinalStep,
  stepsList,
  getCurrentStep,
}: BaseComponentProps) => {
  const { propertyId } = usePropertyOnboardingStore();
  const setPropertyId = usePropertyOnboardingStore(state => state.setPropertyId);
  const [loading, setLoading] = useState(false);
  const [savingTerms, setSavingTerms] = useState(false);
  const [pricing, setPricing] = useState<PropertyPricing | null>(null);
  const [acceptedTerms, setAcceptedTerms] = useState(false);
  const [propertyData, setPropertyData] = useState<PropertyData | null>(null);

  // Charger les donn√©es de la propri√©t√© (prix, commission et statut des conditions)
  useEffect(() => {
    const loadData = async () => {
      if (!propertyId) return;
      setLoading(true);
      try {
        // Statut d'acceptation
        const resStatus = await fetch(`/api/property/policy?propertyId=${propertyId}&type=status`);
        const propertyInfo = await resStatus.json();
        if (propertyInfo) {
          setPropertyData(propertyInfo);
          setAcceptedTerms(propertyInfo.terms_accepted || false);
        }
        // Prix
        const resPrice = await fetch(`/api/property/policy?propertyId=${propertyId}&type=pricing`);
        const priceData = await resPrice.json();
        const amount = priceData?.amount || 0;
        const currency = priceData?.currency || 'EUR';
        // Commission
        const resCommission = await fetch(`/api/property/policy?propertyId=${propertyId}&type=commission`);
        const commissionData = await resCommission.json();
        const commission = commissionData?.percentage || 0;
        const net = amount - (amount * commission / 100);
        setPricing({ amount, commission_percentage: commission, net_price: net, currency });
      } catch (error) {
        toast.error("Erreur lors du chargement des informations");
      } finally {
        setLoading(false);
      }
    };
    loadData();
  }, [propertyId]);

  useEffect(() => {
    if (!propertyId) {
      const storedId = localStorage.getItem('onboarding_property_id');
      if (storedId) {
        setPropertyId(storedId);
      }
    }
  }, [propertyId, setPropertyId]);

  const getCurrencySymbol = (currencyCode: string) => {
    const symbols: { [key: string]: string } = {
      'EUR': '‚Ç¨',
      'USD': '$',
      'GBP': '¬£',
      'XOF': 'CFA',
    };
    return symbols[currencyCode] || currencyCode;
  };

  // Fonction pour sauvegarder l'acceptation des conditions
  const handleTermsAcceptance = async (accepted: boolean) => {
    if (!propertyId) {
      toast.error("Aucune propri√©t√© s√©lectionn√©e");
      return;
    }
    setSavingTerms(true);
    try {
      await fetch('/api/property/policy', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ propertyId, accepted })
      });
      setPropertyData(prev => prev ? { ...prev, terms_accepted: accepted, terms_accepted_at: accepted ? new Date().toISOString() : null } : null);
      setAcceptedTerms(accepted);
      if (accepted) {
        toast.success("Conditions accept√©es et sauvegard√©es");
      } else {
        toast.info("Acceptation des conditions annul√©e");
      }
    } catch (error) {
      toast.error("Erreur lors de la sauvegarde de l'acceptation des conditions");
      setAcceptedTerms(propertyData?.terms_accepted || false);
    } finally {
      setSavingTerms(false);
    }
  };

  const handleSubmit = async () => {
    if (!propertyId) {
      toast.error("Aucune propri√©t√© s√©lectionn√©e");
      return;
    }
    if (!acceptedTerms) {
      toast.error("Vous devez accepter les conditions g√©n√©rales pour continuer");
      return;
    }
    setLoading(true);
    try {
      await fetch('/api/property/policy', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ propertyId })
      });
      toast.success("Propri√©t√© activ√©e avec succ√®s");
      next();
    } catch (error) {
      toast.error("Erreur lors de l'activation de la propri√©t√©");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="relative h-screen bg-gray-50">
      <div className="h-full overflow-auto pb-24">
        <Container className="py-8 space-y-8">
          <Typography variant="h1">
            Conditions G√©n√©rales d'Utilisation
          </Typography>
          
          {/* Affichage du statut d'acceptation pr√©c√©dent */}
          {propertyData?.terms_accepted_at && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <Typography variant="body-base" className="text-green-800">
                ‚úÖ Conditions accept√©es le {new Date(propertyData.terms_accepted_at).toLocaleDateString('fr-FR', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </Typography>
            </div>
          )}

          {/* Conditions simplifi√©es */}
          <div className="rounded-xl shadow-lg p-6">
            <div className="space-y-4">
              {[
                `Afrivago pr√©l√®ve automatiquement ${pricing?.commission_percentage || 0}% de commission sur chaque loyer mensuel collect√©.`,
                "Le propri√©taire doit assurer la maintenance et la disponibilit√© de sa propri√©t√©.",
                "Il est strictement interdit de collecter des loyers directement \"main √† main\" avec les locataires.",
                "Toute tentative de contournement des paiements sera d√©tect√©e et sanctionn√©e.",
                "Les fraudes entra√Ænent une suspension imm√©diate et des poursuites judiciaires.",
                "Tous les revenus locatifs doivent √™tre d√©clar√©s aux autorit√©s fiscales comp√©tentes.",
                "Afrivago prot√®ge vos donn√©es personnelles conform√©ment au RGPD.",
                "Les paiements sont effectu√©s dans un d√©lai de 5 jours ouvrables apr√®s r√©ception du loyer.",
                "La r√©siliation du compte n√©cessite un pr√©avis de 30 jours.",
                "Ces conditions sont r√©gies par le droit b√©ninois et la juridiction de Cotonou."
              ].map((condition, index) => (
                <div key={index} className="flex items-center space-x-3">
                  <span className="flex-shrink-0 w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-bold">
                    {index + 1}
                  </span>
                  <Typography variant="body-lg">
                    {condition}
                  </Typography>
                </div>
              ))}
            </div>
          </div>

          {/* Acceptation des conditions */}
          <div className="bg-gradient-to-r from-primary/10 to-primary/5 rounded p-6 border-2 border-primary/20">
            <div className="flex items-center space-x-4">
              <input
                type="checkbox"
                id="acceptTerms"
                checked={acceptedTerms}
                onChange={(e) => handleTermsAcceptance(e.target.checked)}
                disabled={savingTerms}
                className="mt-1 w-5 h-5 text-primary bg-gray-100 border-gray-300 rounded focus:ring-primary disabled:opacity-50"
              />
              <label htmlFor="acceptTerms" className="flex-1">
                <Typography variant="body-lg" className="text-black">
                  Je certifie avoir lu, compris et accepter l'int√©gralit√© des conditions g√©n√©rales d'utilisation d'Afrivago.
                  {savingTerms && <span className="ml-2 text-primary">üîÑ Sauvegarde...</span>}
                </Typography>
                <Typography variant="body-base">
                  ‚ö†Ô∏è Toute tentative de fraude sera automatiquement signal√©e aux autorit√©s comp√©tentes.
                </Typography>
              </label>
            </div>
          </div>

          {/* Note l√©gale finale */}
          <div className="bg-gray-100 rounded p-6 py-[-20] text-center">
            <Typography variant="body-base">
              Ces conditions sont r√©gies par le droit b√©ninois. Tout litige sera soumis √† la juridiction comp√©tente de Cotonou.
              <br />
              Derni√®re mise √† jour : {new Date().toLocaleDateString('fr-FR')}
            </Typography>
          </div>
        </Container>
      </div>

      <OnboardingFooter
        prev={prev}
        next={handleSubmit}
        isFirstStep={isFirstStep}
        isFinalStep={isFinalStep}
        isLoading={loading || savingTerms}
        nextText={acceptedTerms ? "Activer ma propri√©t√©" : "Accepter les conditions"}
        nextDisabled={!acceptedTerms}
      />
    </div>
  );
};